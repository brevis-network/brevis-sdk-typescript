/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.23.4
 * source: brevis/gateway.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./types";
import * as dependency_2 from "./../common/circuit_data";
import * as dependency_3 from "./../google/api/annotations";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export enum ErrCode {
    ERROR_CODE_UNDEFINED = 0,
    ERROR_CODE_SLOT_VALUE_PROOF_GENERATION_FAILED = 1,
    ERROR_CODE_TRANSACTION_PROOF_GENERATION_FAILED = 2
}
export enum CheckStatus {
    IN_PROGRESS = 0,
    COMPLETE = 1
}
export enum QueryStatus {
    QS_UNKNOWN = 0,
    QS_TO_BE_PAID = 1,
    QS_PAID = 2,
    QS_PROOF_READY = 3,
    QS_COMPLETE = 4,
    QS_FAILED = 5
}
export class ErrMsg extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        code?: ErrCode;
        msg?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("msg" in data && data.msg != undefined) {
                this.msg = data.msg;
            }
        }
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 1, ErrCode.ERROR_CODE_UNDEFINED) as ErrCode;
    }
    set code(value: ErrCode) {
        pb_1.Message.setField(this, 1, value);
    }
    get msg() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set msg(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        code?: ErrCode;
        msg?: string;
    }): ErrMsg {
        const message = new ErrMsg({});
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.msg != null) {
            message.msg = data.msg;
        }
        return message;
    }
    toObject() {
        const data: {
            code?: ErrCode;
            msg?: string;
        } = {};
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.msg != null) {
            data.msg = this.msg;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.code != ErrCode.ERROR_CODE_UNDEFINED)
            writer.writeEnum(1, this.code);
        if (this.msg.length)
            writer.writeString(2, this.msg);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ErrMsg {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ErrMsg();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.code = reader.readEnum();
                    break;
                case 2:
                    message.msg = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ErrMsg {
        return ErrMsg.deserialize(bytes);
    }
}
export class PrepareQueryRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        chain_id?: number;
        receipt_infos?: dependency_1.ReceiptInfo[];
        storage_query_infos?: dependency_1.StorageQueryInfo[];
        transaction_infos?: dependency_1.TransactionInfo[];
        app_circuit_info?: dependency_2.AppCircuitInfo;
        use_app_circuit_info?: boolean;
        target_chain_id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3, 4], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("chain_id" in data && data.chain_id != undefined) {
                this.chain_id = data.chain_id;
            }
            if ("receipt_infos" in data && data.receipt_infos != undefined) {
                this.receipt_infos = data.receipt_infos;
            }
            if ("storage_query_infos" in data && data.storage_query_infos != undefined) {
                this.storage_query_infos = data.storage_query_infos;
            }
            if ("transaction_infos" in data && data.transaction_infos != undefined) {
                this.transaction_infos = data.transaction_infos;
            }
            if ("app_circuit_info" in data && data.app_circuit_info != undefined) {
                this.app_circuit_info = data.app_circuit_info;
            }
            if ("use_app_circuit_info" in data && data.use_app_circuit_info != undefined) {
                this.use_app_circuit_info = data.use_app_circuit_info;
            }
            if ("target_chain_id" in data && data.target_chain_id != undefined) {
                this.target_chain_id = data.target_chain_id;
            }
        }
    }
    get chain_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set chain_id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get receipt_infos() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.ReceiptInfo, 2) as dependency_1.ReceiptInfo[];
    }
    set receipt_infos(value: dependency_1.ReceiptInfo[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    get storage_query_infos() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.StorageQueryInfo, 3) as dependency_1.StorageQueryInfo[];
    }
    set storage_query_infos(value: dependency_1.StorageQueryInfo[]) {
        pb_1.Message.setRepeatedWrapperField(this, 3, value);
    }
    get transaction_infos() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.TransactionInfo, 4) as dependency_1.TransactionInfo[];
    }
    set transaction_infos(value: dependency_1.TransactionInfo[]) {
        pb_1.Message.setRepeatedWrapperField(this, 4, value);
    }
    get app_circuit_info() {
        return pb_1.Message.getWrapperField(this, dependency_2.AppCircuitInfo, 5) as dependency_2.AppCircuitInfo;
    }
    set app_circuit_info(value: dependency_2.AppCircuitInfo) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get has_app_circuit_info() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get use_app_circuit_info() {
        return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
    }
    set use_app_circuit_info(value: boolean) {
        pb_1.Message.setField(this, 6, value);
    }
    get target_chain_id() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set target_chain_id(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    static fromObject(data: {
        chain_id?: number;
        receipt_infos?: ReturnType<typeof dependency_1.ReceiptInfo.prototype.toObject>[];
        storage_query_infos?: ReturnType<typeof dependency_1.StorageQueryInfo.prototype.toObject>[];
        transaction_infos?: ReturnType<typeof dependency_1.TransactionInfo.prototype.toObject>[];
        app_circuit_info?: ReturnType<typeof dependency_2.AppCircuitInfo.prototype.toObject>;
        use_app_circuit_info?: boolean;
        target_chain_id?: number;
    }): PrepareQueryRequest {
        const message = new PrepareQueryRequest({});
        if (data.chain_id != null) {
            message.chain_id = data.chain_id;
        }
        if (data.receipt_infos != null) {
            message.receipt_infos = data.receipt_infos.map(item => dependency_1.ReceiptInfo.fromObject(item));
        }
        if (data.storage_query_infos != null) {
            message.storage_query_infos = data.storage_query_infos.map(item => dependency_1.StorageQueryInfo.fromObject(item));
        }
        if (data.transaction_infos != null) {
            message.transaction_infos = data.transaction_infos.map(item => dependency_1.TransactionInfo.fromObject(item));
        }
        if (data.app_circuit_info != null) {
            message.app_circuit_info = dependency_2.AppCircuitInfo.fromObject(data.app_circuit_info);
        }
        if (data.use_app_circuit_info != null) {
            message.use_app_circuit_info = data.use_app_circuit_info;
        }
        if (data.target_chain_id != null) {
            message.target_chain_id = data.target_chain_id;
        }
        return message;
    }
    toObject() {
        const data: {
            chain_id?: number;
            receipt_infos?: ReturnType<typeof dependency_1.ReceiptInfo.prototype.toObject>[];
            storage_query_infos?: ReturnType<typeof dependency_1.StorageQueryInfo.prototype.toObject>[];
            transaction_infos?: ReturnType<typeof dependency_1.TransactionInfo.prototype.toObject>[];
            app_circuit_info?: ReturnType<typeof dependency_2.AppCircuitInfo.prototype.toObject>;
            use_app_circuit_info?: boolean;
            target_chain_id?: number;
        } = {};
        if (this.chain_id != null) {
            data.chain_id = this.chain_id;
        }
        if (this.receipt_infos != null) {
            data.receipt_infos = this.receipt_infos.map((item: dependency_1.ReceiptInfo) => item.toObject());
        }
        if (this.storage_query_infos != null) {
            data.storage_query_infos = this.storage_query_infos.map((item: dependency_1.StorageQueryInfo) => item.toObject());
        }
        if (this.transaction_infos != null) {
            data.transaction_infos = this.transaction_infos.map((item: dependency_1.TransactionInfo) => item.toObject());
        }
        if (this.app_circuit_info != null) {
            data.app_circuit_info = this.app_circuit_info.toObject();
        }
        if (this.use_app_circuit_info != null) {
            data.use_app_circuit_info = this.use_app_circuit_info;
        }
        if (this.target_chain_id != null) {
            data.target_chain_id = this.target_chain_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.chain_id != 0)
            writer.writeUint64(1, this.chain_id);
        if (this.receipt_infos.length)
            writer.writeRepeatedMessage(2, this.receipt_infos, (item: dependency_1.ReceiptInfo) => item.serialize(writer));
        if (this.storage_query_infos.length)
            writer.writeRepeatedMessage(3, this.storage_query_infos, (item: dependency_1.StorageQueryInfo) => item.serialize(writer));
        if (this.transaction_infos.length)
            writer.writeRepeatedMessage(4, this.transaction_infos, (item: dependency_1.TransactionInfo) => item.serialize(writer));
        if (this.has_app_circuit_info)
            writer.writeMessage(5, this.app_circuit_info, () => this.app_circuit_info.serialize(writer));
        if (this.use_app_circuit_info != false)
            writer.writeBool(6, this.use_app_circuit_info);
        if (this.target_chain_id != 0)
            writer.writeUint64(7, this.target_chain_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PrepareQueryRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PrepareQueryRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.chain_id = reader.readUint64();
                    break;
                case 2:
                    reader.readMessage(message.receipt_infos, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_1.ReceiptInfo.deserialize(reader), dependency_1.ReceiptInfo));
                    break;
                case 3:
                    reader.readMessage(message.storage_query_infos, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_1.StorageQueryInfo.deserialize(reader), dependency_1.StorageQueryInfo));
                    break;
                case 4:
                    reader.readMessage(message.transaction_infos, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_1.TransactionInfo.deserialize(reader), dependency_1.TransactionInfo));
                    break;
                case 5:
                    reader.readMessage(message.app_circuit_info, () => message.app_circuit_info = dependency_2.AppCircuitInfo.deserialize(reader));
                    break;
                case 6:
                    message.use_app_circuit_info = reader.readBool();
                    break;
                case 7:
                    message.target_chain_id = reader.readUint64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PrepareQueryRequest {
        return PrepareQueryRequest.deserialize(bytes);
    }
}
export class PrepareQueryResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        err?: ErrMsg;
        query_hash?: string;
        fee?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("err" in data && data.err != undefined) {
                this.err = data.err;
            }
            if ("query_hash" in data && data.query_hash != undefined) {
                this.query_hash = data.query_hash;
            }
            if ("fee" in data && data.fee != undefined) {
                this.fee = data.fee;
            }
        }
    }
    get err() {
        return pb_1.Message.getWrapperField(this, ErrMsg, 1) as ErrMsg;
    }
    set err(value: ErrMsg) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_err() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get query_hash() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set query_hash(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get fee() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set fee(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        err?: ReturnType<typeof ErrMsg.prototype.toObject>;
        query_hash?: string;
        fee?: string;
    }): PrepareQueryResponse {
        const message = new PrepareQueryResponse({});
        if (data.err != null) {
            message.err = ErrMsg.fromObject(data.err);
        }
        if (data.query_hash != null) {
            message.query_hash = data.query_hash;
        }
        if (data.fee != null) {
            message.fee = data.fee;
        }
        return message;
    }
    toObject() {
        const data: {
            err?: ReturnType<typeof ErrMsg.prototype.toObject>;
            query_hash?: string;
            fee?: string;
        } = {};
        if (this.err != null) {
            data.err = this.err.toObject();
        }
        if (this.query_hash != null) {
            data.query_hash = this.query_hash;
        }
        if (this.fee != null) {
            data.fee = this.fee;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_err)
            writer.writeMessage(1, this.err, () => this.err.serialize(writer));
        if (this.query_hash.length)
            writer.writeString(2, this.query_hash);
        if (this.fee.length)
            writer.writeString(3, this.fee);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PrepareQueryResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PrepareQueryResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.err, () => message.err = ErrMsg.deserialize(reader));
                    break;
                case 2:
                    message.query_hash = reader.readString();
                    break;
                case 3:
                    message.fee = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PrepareQueryResponse {
        return PrepareQueryResponse.deserialize(bytes);
    }
}
export class SubmitAppCircuitProofRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        query_hash?: string;
        target_chain_id?: number;
        proof?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("query_hash" in data && data.query_hash != undefined) {
                this.query_hash = data.query_hash;
            }
            if ("target_chain_id" in data && data.target_chain_id != undefined) {
                this.target_chain_id = data.target_chain_id;
            }
            if ("proof" in data && data.proof != undefined) {
                this.proof = data.proof;
            }
        }
    }
    get query_hash() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set query_hash(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get target_chain_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set target_chain_id(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get proof() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set proof(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        query_hash?: string;
        target_chain_id?: number;
        proof?: string;
    }): SubmitAppCircuitProofRequest {
        const message = new SubmitAppCircuitProofRequest({});
        if (data.query_hash != null) {
            message.query_hash = data.query_hash;
        }
        if (data.target_chain_id != null) {
            message.target_chain_id = data.target_chain_id;
        }
        if (data.proof != null) {
            message.proof = data.proof;
        }
        return message;
    }
    toObject() {
        const data: {
            query_hash?: string;
            target_chain_id?: number;
            proof?: string;
        } = {};
        if (this.query_hash != null) {
            data.query_hash = this.query_hash;
        }
        if (this.target_chain_id != null) {
            data.target_chain_id = this.target_chain_id;
        }
        if (this.proof != null) {
            data.proof = this.proof;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.query_hash.length)
            writer.writeString(1, this.query_hash);
        if (this.target_chain_id != 0)
            writer.writeUint64(2, this.target_chain_id);
        if (this.proof.length)
            writer.writeString(3, this.proof);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SubmitAppCircuitProofRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SubmitAppCircuitProofRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.query_hash = reader.readString();
                    break;
                case 2:
                    message.target_chain_id = reader.readUint64();
                    break;
                case 3:
                    message.proof = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SubmitAppCircuitProofRequest {
        return SubmitAppCircuitProofRequest.deserialize(bytes);
    }
}
export class SubmitAppCircuitProofResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        err?: ErrMsg;
        success?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("err" in data && data.err != undefined) {
                this.err = data.err;
            }
            if ("success" in data && data.success != undefined) {
                this.success = data.success;
            }
        }
    }
    get err() {
        return pb_1.Message.getWrapperField(this, ErrMsg, 1) as ErrMsg;
    }
    set err(value: ErrMsg) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_err() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get success() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set success(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        err?: ReturnType<typeof ErrMsg.prototype.toObject>;
        success?: boolean;
    }): SubmitAppCircuitProofResponse {
        const message = new SubmitAppCircuitProofResponse({});
        if (data.err != null) {
            message.err = ErrMsg.fromObject(data.err);
        }
        if (data.success != null) {
            message.success = data.success;
        }
        return message;
    }
    toObject() {
        const data: {
            err?: ReturnType<typeof ErrMsg.prototype.toObject>;
            success?: boolean;
        } = {};
        if (this.err != null) {
            data.err = this.err.toObject();
        }
        if (this.success != null) {
            data.success = this.success;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_err)
            writer.writeMessage(1, this.err, () => this.err.serialize(writer));
        if (this.success != false)
            writer.writeBool(2, this.success);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SubmitAppCircuitProofResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SubmitAppCircuitProofResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.err, () => message.err = ErrMsg.deserialize(reader));
                    break;
                case 2:
                    message.success = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SubmitAppCircuitProofResponse {
        return SubmitAppCircuitProofResponse.deserialize(bytes);
    }
}
export class GetQueryStatusRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        query_hash?: string;
        target_chain_id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("query_hash" in data && data.query_hash != undefined) {
                this.query_hash = data.query_hash;
            }
            if ("target_chain_id" in data && data.target_chain_id != undefined) {
                this.target_chain_id = data.target_chain_id;
            }
        }
    }
    get query_hash() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set query_hash(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get target_chain_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set target_chain_id(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        query_hash?: string;
        target_chain_id?: number;
    }): GetQueryStatusRequest {
        const message = new GetQueryStatusRequest({});
        if (data.query_hash != null) {
            message.query_hash = data.query_hash;
        }
        if (data.target_chain_id != null) {
            message.target_chain_id = data.target_chain_id;
        }
        return message;
    }
    toObject() {
        const data: {
            query_hash?: string;
            target_chain_id?: number;
        } = {};
        if (this.query_hash != null) {
            data.query_hash = this.query_hash;
        }
        if (this.target_chain_id != null) {
            data.target_chain_id = this.target_chain_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.query_hash.length)
            writer.writeString(1, this.query_hash);
        if (this.target_chain_id != 0)
            writer.writeUint64(2, this.target_chain_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetQueryStatusRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetQueryStatusRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.query_hash = reader.readString();
                    break;
                case 2:
                    message.target_chain_id = reader.readUint64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetQueryStatusRequest {
        return GetQueryStatusRequest.deserialize(bytes);
    }
}
export class GetQueryStatusResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        err?: ErrMsg;
        status?: QueryStatus;
        tx_hash?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("err" in data && data.err != undefined) {
                this.err = data.err;
            }
            if ("status" in data && data.status != undefined) {
                this.status = data.status;
            }
            if ("tx_hash" in data && data.tx_hash != undefined) {
                this.tx_hash = data.tx_hash;
            }
        }
    }
    get err() {
        return pb_1.Message.getWrapperField(this, ErrMsg, 1) as ErrMsg;
    }
    set err(value: ErrMsg) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_err() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get status() {
        return pb_1.Message.getFieldWithDefault(this, 2, QueryStatus.QS_UNKNOWN) as QueryStatus;
    }
    set status(value: QueryStatus) {
        pb_1.Message.setField(this, 2, value);
    }
    get tx_hash() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set tx_hash(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        err?: ReturnType<typeof ErrMsg.prototype.toObject>;
        status?: QueryStatus;
        tx_hash?: string;
    }): GetQueryStatusResponse {
        const message = new GetQueryStatusResponse({});
        if (data.err != null) {
            message.err = ErrMsg.fromObject(data.err);
        }
        if (data.status != null) {
            message.status = data.status;
        }
        if (data.tx_hash != null) {
            message.tx_hash = data.tx_hash;
        }
        return message;
    }
    toObject() {
        const data: {
            err?: ReturnType<typeof ErrMsg.prototype.toObject>;
            status?: QueryStatus;
            tx_hash?: string;
        } = {};
        if (this.err != null) {
            data.err = this.err.toObject();
        }
        if (this.status != null) {
            data.status = this.status;
        }
        if (this.tx_hash != null) {
            data.tx_hash = this.tx_hash;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_err)
            writer.writeMessage(1, this.err, () => this.err.serialize(writer));
        if (this.status != QueryStatus.QS_UNKNOWN)
            writer.writeEnum(2, this.status);
        if (this.tx_hash.length)
            writer.writeString(3, this.tx_hash);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetQueryStatusResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetQueryStatusResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.err, () => message.err = ErrMsg.deserialize(reader));
                    break;
                case 2:
                    message.status = reader.readEnum();
                    break;
                case 3:
                    message.tx_hash = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetQueryStatusResponse {
        return GetQueryStatusResponse.deserialize(bytes);
    }
}
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedGatewayService {
    static definition = {
        PrepareQuery: {
            path: "/brevis.Gateway/PrepareQuery",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: PrepareQueryRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => PrepareQueryRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: PrepareQueryResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => PrepareQueryResponse.deserialize(new Uint8Array(bytes))
        },
        SubmitAppCircuitProof: {
            path: "/brevis.Gateway/SubmitAppCircuitProof",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: SubmitAppCircuitProofRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => SubmitAppCircuitProofRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: SubmitAppCircuitProofResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => SubmitAppCircuitProofResponse.deserialize(new Uint8Array(bytes))
        },
        GetQueryStatus: {
            path: "/brevis.Gateway/GetQueryStatus",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: GetQueryStatusRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => GetQueryStatusRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: GetQueryStatusResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => GetQueryStatusResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract PrepareQuery(call: grpc_1.ServerUnaryCall<PrepareQueryRequest, PrepareQueryResponse>, callback: grpc_1.sendUnaryData<PrepareQueryResponse>): void;
    abstract SubmitAppCircuitProof(call: grpc_1.ServerUnaryCall<SubmitAppCircuitProofRequest, SubmitAppCircuitProofResponse>, callback: grpc_1.sendUnaryData<SubmitAppCircuitProofResponse>): void;
    abstract GetQueryStatus(call: grpc_1.ServerUnaryCall<GetQueryStatusRequest, GetQueryStatusResponse>, callback: grpc_1.sendUnaryData<GetQueryStatusResponse>): void;
}
export class GatewayClient extends grpc_1.makeGenericClientConstructor(UnimplementedGatewayService.definition, "Gateway", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    PrepareQuery: GrpcPromiseServiceInterface<PrepareQueryRequest, PrepareQueryResponse> = (message: PrepareQueryRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<PrepareQueryResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.PrepareQuery(message, metadata, options, (error: grpc_1.ServiceError, response: PrepareQueryResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    SubmitAppCircuitProof: GrpcPromiseServiceInterface<SubmitAppCircuitProofRequest, SubmitAppCircuitProofResponse> = (message: SubmitAppCircuitProofRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<SubmitAppCircuitProofResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.SubmitAppCircuitProof(message, metadata, options, (error: grpc_1.ServiceError, response: SubmitAppCircuitProofResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    GetQueryStatus: GrpcPromiseServiceInterface<GetQueryStatusRequest, GetQueryStatusResponse> = (message: GetQueryStatusRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<GetQueryStatusResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.GetQueryStatus(message, metadata, options, (error: grpc_1.ServiceError, response: GetQueryStatusResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
}
